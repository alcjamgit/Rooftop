@model RealEstateApp.ViewModels.RealtyAdCreateViewModel

@{
    ViewBag.Title = "Post New Property";
}

@section styles{
    
    <link href="~/Plugins/chosen_v1.1.0/chosen.min.css" rel="stylesheet" />
    <link href="~/Plugins/jquery-ui-1.10.4.custom/css/ui-lightness/jquery-ui-1.10.4.custom.min.css" rel="stylesheet" /> @*used for google maps*@
    <style>
        /*-------------------------------------------------
        Start of Chosen
        -------------------------------------------------*/
        .chosen-container-single .chosen-single {height: 34px;}
            .chosen-container-single .chosen-single span {padding-top: 5px;}
            /*Reposition drop icon*/
            .chosen-container-single .chosen-single div b {background-position-y: 6px;}
        /*-------------------------------------------------
        End of Chosen
        -------------------------------------------------*/
        .ui-autocomplete {
            z-index: 1100;
        }
    </style>
    }
<div class="panel panel-default">
    <div class="panel-heading"><div class=""></div>Post New Property</div>
    <div class="panel-body">
        @using (Html.BeginForm("Create", "RealtyAd", FormMethod.Post, new { enctype = "multipart/form-data", id = "PostNewPropertyForm", @class="form-horizontal" }))
        {
            @Html.AntiForgeryToken()            

                    @Html.ValidationSummary(true)
                         
                        <div class="form-group">
                            @Html.LabelFor(model => model.ShortDescn, new { @class = "control-label col-md-2 hidden-xs" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ShortDescn, new { htmlAttributes = new { @class = "form-control", placeholder = "Title" } })
                                @*<span class="help-block">Keep it short and sweet, avoid putting too much keywords.</span>*@
                                @Html.ValidationMessageFor(model => model.ShortDescn)
                            </div>
                        </div>
            
                        <div class="form-group">
                            @Html.LabelFor(model => model.Category, new { @class = "control-label col-md-2 hidden-col-xs" })

                            <div class="col-md-2">
                                @Html.EnumDropDownListFor(model => model.Category, new { @class = "form-control chzn-select", placeholder = "Any Beds" })
                                @Html.ValidationMessageFor(model => model.Category)
                            </div>                        
                        </div>
            
                        <div class="form-group">
                            @Html.LabelFor(model => model.Price, new { @class = "control-label col-md-2 hidden-xs" })
                            <div class="col-md-2">
                                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", placeholder = "Price" } })
                                @Html.ValidationMessageFor(model => model.Price)
                            </div>
                        </div>

                        <div class="form-group">
                            @*@Html.Label("Other Info", new { @class = "control-label col-xs-2 hidden-col-xs" })*@
                            @Html.LabelFor(model => model.BedCount, new { @class = "control-label col-md-2 hidden-xs" })
                            <div class="col-sm-2">
                                @*@Html.EditorFor(model => model.BedCount, new { htmlAttributes = new { @class = "form-control", placeholder = "Bed Count" } })*@
                                @Html.DropDownListFor(model => model.BedCount, ViewBag.BedCountSelectItems as IEnumerable<SelectListItem>, new { @class = "form-control chzn-select", placeholder = "Any Beds" })
                                @Html.ValidationMessageFor(model => model.BedCount)
                            </div>
                            @Html.LabelFor(model => model.BathCount, new { @class = "control-label col-md-2 hidden-xs" })
                            <div class="col-sm-2">
                                @Html.DropDownListFor(model => model.BathCount, ViewBag.BathCountSelectItems as IEnumerable<SelectListItem> , new { @class = "form-control chzn-select", placeholder = "Any Bath"})
                                @Html.ValidationMessageFor(model => model.BathCount)
                            </div>

                            @Html.LabelFor(model => model.FloorAreaSqM, new { @class = "control-label col-md-2 hidden-xs" })
                            <div class="col-sm-2">
                                @Html.DropDownListFor(model => model.FloorAreaSqM, ViewBag.FloorAreaSelectItems as IEnumerable<SelectListItem>, new { @class = "form-control chzn-select", placeholder = "Floor Area (sqm)"  })
                                @Html.ValidationMessageFor(model => model.FloorAreaSqM)
                            </div>
                        </div>
                        
                        @*<section class="step" data-step-title="Upload Images">*@
                        <div class="form-group">
                            @Html.LabelFor(model => model.PostedImages, new { @class = "control-label col-md-2 hidden-col-xs" })
                            <div class="col-md-10">
                                <div class="row">
                                    <input type="file" name="PostedImages" class="col-md-4" multiple="multiple" />
                                </div>
                            </div>
                        </div>
                    @*</section>*@
            
                        <div class="form-group">
                            @Html.LabelFor(model => model.LongDescn, new { @class = "control-label col-md-2 hidden-xs" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.LongDescn, new { @class = "form-control", @rows = 6, placeholder = "Property Description" })
                                @Html.ValidationMessageFor(model => model.LongDescn)
                            </div>
                        </div>
                    @*</section>*@
                    @*<section class="step" data-step-title="Property Location">*@
                        <div class="form-group">
                            @Html.LabelFor(model => model.City, new { @class = "control-label col-md-2 hidden-xs" })
                            <div class="col-md-4">
                                @Html.DropDownListFor(model => model.City, ViewBag.City_Id as SelectList, String.Empty, new { @class = "form-control chzn-select", placeholder = "Select City" })
                                @Html.ValidationMessageFor(model => model.City)
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Map Location", new { @class = "control-label col-md-2 hidden-xs" })
                            <div class="col-md-4">
                                <!-- Button trigger modal -->
                                <button class="btn btn-primary btn-default" data-toggle="modal" data-target="#googleMapModal">
                                    Mark Location Using Google Map
                                </button>
                            </div>
                        </div>
            
                        <div class="form-group">
                            @Html.LabelFor(model => model.Address, new { @class = "control-label col-md-2 hidden-xs" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", placeholder = "Address" } })
                                @Html.ValidationMessageFor(model => model.Address)
                            </div>
                        </div>
                        <div class="form-group">
                                @Html.HiddenFor(model => model.Longitude)
                                @Html.HiddenFor(model => model.Latitude)
                        </div>
                    @*</section>*@



                    <div class="form-group">
                        <div class="col-md-10">
                            <input type="submit" value="Create" class="btn btn-default" id="CreatePropertyBtn" />
                        </div>
                    </div>

        
        }

    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="panel-footer">
                <button class="btn btn-default">@Html.ActionLink("Cancel", "Index")</button>
                <div id="wizardPager" class="control-group">
                    <div class="next"><a class="btn btn-default" href="#">Next</a></div>
                    <div class="prev"><a class="btn btn-default" href="#">Previous</a></div>
                    <div><a class="btn btn-default" href="#" id="DummySubmit">Finish</a></div>
                </div>
            </div class="panel-footer">
        </div>
    </div>
</div>



<!-- Modal -->
<div class="modal fade" id="googleMapModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="myModalLabel">Mark the location of your property</h4>
            </div>
            
            <div class="modal-body">
                <input id="address" type="text" class="form-control" placeholder="Type the street then the city"/>
                <br />
                
                
                <div id="map_canvas" class="col-md-12" style="height:300px"  ></div>
                <br />
                <span>Drag the marker to point to exact location</span>
                <input id="latitude" type="hidden"/>
                <input id="longitude" type="hidden" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveModal">Save</button>
            </div>
        </div>
    </div>
</div>
@section scripts{
    @Scripts.Render("~/bundles/jqueryval")
    
    <script src="~/Plugins/tinymce/tinymce.min.js"></script> 
    <script src="~/Plugins/chosen_v1.1.0/chosen.jquery.min.js"></script>
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script src="~/Plugins/jquery-ui-1.10.4.custom/js/jquery-ui-1.10.4.custom.min.js"></script> //for google geocode autocomplete
    <script>
        /*--------------------------------------------
        Initialize variables for google map
        --------------------------------------------*/
        var geocoder;
        var map;
        var marker;
        $(document).ready(function () {
            /*--------------------------------------------
            Beautify bootstrap combo for bootstrap
            --------------------------------------------*/
            $(".chzn-select").chosen({
                disable_search_threshold: 10,
                width:'100%'
            });

            /*--------------------------------------------
            WYSIWYG Editor
            --------------------------------------------*/
            tinymce.init({
                selector: 'textarea',
                menubar: false,
                plugins: "link",
            });

            /*--------------------------------------------
            Google Maps Client Side Geocoding
            --------------------------------------------*/
            initializeGoogleMap();

            //fix resizing issues with google map
            $('#googleMapModal').on('shown.bs.modal', function (e) {
                google.maps.event.trigger(map, "resize");
                
            });
            //


            function initializeGoogleMap() {
                //MAP
                var latlng = new google.maps.LatLng(14.6090537, 121.02225650000003);
                var options = {
                    zoom: 14,
                    center: latlng,
                    mapTypeId: google.maps.MapTypeId.Map
                };

                map = new google.maps.Map(document.getElementById("map_canvas"), options);

                //GEOCODER
                geocoder = new google.maps.Geocoder();

                marker = new google.maps.Marker({
                    map: map,
                    draggable: true
                });

            }
            //auto complete
            $(function () {
                $("#address").autocomplete({
                    //This bit uses the geocoder to fetch address values
                    source: function (request, response) {
                        geocoder.geocode({ 'address': request.term, 'region':'phi' }, function (results, status) {
                            response($.map(results, function (item) {
                                return {
                                    label: item.formatted_address,
                                    value: item.formatted_address,
                                    latitude: item.geometry.location.lat(),
                                    longitude: item.geometry.location.lng()
                                }
                            }));
                        })
                    },
                    //This bit is executed upon selection of an address
                    select: function (event, ui) {
                        $("#latitude").val(ui.item.latitude);
                        $("#longitude").val(ui.item.longitude);
                        var location = new google.maps.LatLng(ui.item.latitude, ui.item.longitude);
                        marker.setPosition(location);
                        map.setCenter(location);
                    }
                });
            });
            //end auto complete
            //Reverse geocoding, when the marker is dragged change the lat and long textboxes
            google.maps.event.addListener(marker, 'drag', function () {
                geocoder.geocode({ 'latLng': marker.getPosition() }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        if (results[0]) {
                            $('#address').val(results[0].formatted_address);
                            $('#latitude').val(marker.getPosition().lat());
                            $('#longitude').val(marker.getPosition().lng());
                        }
                    }
                });
            });
            //end of reverse geocoding

            //Bootstrap Modal - cancel
            $('#googleMapModal').on('hidden.bs.modal', function (e) {
                //alert("cancel");
            })
            $('#saveModal').click(function () {
                $('#Address').val( $('#address').val() );
                $('#Latitude').val( $('#latitude').val() );
                $('#Longitude').val( $('#longitude').val() );
                $('#googleMapModal').modal('hide');
            });

        });


    </script>
}